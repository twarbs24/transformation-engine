apiVersion: apps/v1
kind: Deployment
metadata:
  name: webhook-receiver
  namespace: code-analysis
  labels:
    app: webhook-receiver
spec:
  replicas: 2
  selector:
    matchLabels:
      app: webhook-receiver
  template:
    metadata:
      labels:
        app: webhook-receiver
    spec:
      containers:
      - name: webhook-receiver
        image: ${DOCKER_REGISTRY}/webhook-receiver:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8082
        env:
        - name: TRANSFORMATION_API_URL
          value: "http://transformation-engine.code-analysis.svc.cluster.local:8081"
        - name: PREFERRED_MODEL
          valueFrom:
            configMapKeyRef:
              name: transformation-engine-config
              key: preferred_model
        - name: FALLBACK_MODEL
          valueFrom:
            configMapKeyRef:
              name: transformation-engine-config
              key: fallback_model
        - name: SPECIALIZED_MODEL
          valueFrom:
            configMapKeyRef:
              name: transformation-engine-config
              key: specialized_model
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: github-credentials
              key: token
        - name: GITHUB_WEBHOOK_SECRET
          valueFrom:
            secretKeyRef:
              name: github-webhook-secret
              key: webhook-secret
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "256Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8082
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: webhook-receiver
  namespace: code-analysis
spec:
  selector:
    app: webhook-receiver
  ports:
  - port: 80
    targetPort: 8082
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: webhook-receiver-ingress
  namespace: code-analysis
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - webhook.example.com
    secretName: webhook-tls
  rules:
  - host: webhook.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: webhook-receiver
            port:
              number: 80
