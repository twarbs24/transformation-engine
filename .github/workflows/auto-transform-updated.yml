name: Automated Code Transformation

on:
  # Run on push to main branch
  push:
    branches: [ main, master ]
  
  # Run on pull requests
  pull_request:
    branches: [ main, master ]
    
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      transformation_type:
        description: 'Type of transformation to apply'
        required: true
        default: 'REFACTOR'
        type: choice
        options:
          - REFACTOR
          - OPTIMIZE
          - PRUNE
          - MERGE
          - MODERNIZE
          - FIX_SECURITY
      verification_level:
        description: 'Level of verification to perform'
        required: true
        default: 'STANDARD'
        type: choice
        options:
          - NONE
          - BASIC
          - STANDARD
          - STRICT
      safe_mode:
        description: 'Only apply verified transformations'
        required: true
        default: true
        type: boolean
      preferred_model:
        description: 'Preferred model to use for transformations'
        required: false
        default: 'deepseek-coder:latest'
        type: string
      fallback_model:
        description: 'Fallback model to use for transformations'
        required: false
        default: 'qwen:7b'
        type: string
      specialized_model:
        description: 'Specialized model to use for complex transformations'
        required: false
        default: 'codellama:latest'
        type: string

jobs:
  transform:
    runs-on: ubuntu-latest
    
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TRANSFORMATION_TYPE: ${{ github.event.inputs.transformation_type || 'REFACTOR' }}
      VERIFICATION_LEVEL: ${{ github.event.inputs.verification_level || 'STANDARD' }}
      SAFE_MODE: ${{ github.event.inputs.safe_mode || 'true' }}
      PREFERRED_MODEL: ${{ github.event.inputs.preferred_model || 'deepseek-coder:latest' }}
      FALLBACK_MODEL: ${{ github.event.inputs.fallback_model || 'qwen:7b' }}
      SPECIALIZED_MODEL: ${{ github.event.inputs.specialized_model || 'codellama:latest' }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install httpx pytest mypy pylint flake8 black isort radon gitpython pydantic
          
      - name: Identify changed files
        id: changed-files
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For pull requests, get changed files between base and head
            echo "::set-output name=files::$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E '\.py$|\.js$|\.ts$|\.java$' | tr '\n' ' ')"
          else
            # For pushes, get changed files in the last commit
            echo "::set-output name=files::$(git diff --name-only HEAD^ HEAD | grep -E '\.py$|\.js$|\.ts$|\.java$' | tr '\n' ' ')"
          fi
          
      - name: Run transformation engine
        run: |
          # Create a simple transformation script
          cat > transform.py << 'EOF'
          import os
          import sys
          import json
          import subprocess
          from pathlib import Path
          
          # Import transformation engine modules
          sys.path.append('.')
          from models import TransformationType, VerificationLevel
          from codebase_transformer import CodebaseTransformer
          
          def main():
              # Get environment variables
              transformation_type = os.environ.get('TRANSFORMATION_TYPE', 'REFACTOR')
              verification_level = os.environ.get('VERIFICATION_LEVEL', 'STANDARD')
              safe_mode = os.environ.get('SAFE_MODE', 'true').lower() == 'true'
              preferred_model = os.environ.get('PREFERRED_MODEL', 'deepseek-coder:latest')
              fallback_model = os.environ.get('FALLBACK_MODEL', 'qwen:7b')
              specialized_model = os.environ.get('SPECIALIZED_MODEL', 'codellama:latest')
              
              # Get list of files to transform
              files_str = os.environ.get('FILES', '')
              files = [f for f in files_str.split() if f]
              
              if not files:
                  print("No files to transform")
                  return
              
              print(f"Transforming {len(files)} files with {transformation_type} transformation")
              
              # Initialize transformer
              transformer = CodebaseTransformer(
                  workspace_path='.',
                  verification_level=verification_level,
                  safe_mode=safe_mode,
                  preferred_model=preferred_model or None,
                  fallback_model=fallback_model or None,
                  specialized_model=specialized_model or None
              )
              
              # Group files by language
              file_groups = {}
              for file_path in files:
                  ext = Path(file_path).suffix.lower()
                  language = None
                  
                  if ext == '.py':
                      language = 'python'
                  elif ext in ['.js', '.ts']:
                      language = 'javascript'
                  elif ext == '.java':
                      language = 'java'
                  
                  if language:
                      if language not in file_groups:
                          file_groups[language] = []
                      file_groups[language].append(file_path)
              
              # Transform files by language group
              results = []
              for language, group_files in file_groups.items():
                  print(f"Processing {len(group_files)} {language} files")
                  
                  for file_path in group_files:
                      try:
                          with open(file_path, 'r') as f:
                              original_code = f.read()
                          
                          # Apply transformation
                          transformed_code, summary = transformer.transform_code(
                              original_code,
                              file_path,
                              language,
                              transformation_type
                          )
                          
                          # Check if code was actually transformed
                          if transformed_code != original_code:
                              with open(file_path, 'w') as f:
                                  f.write(transformed_code)
                              
                              print(f"✅ Transformed {file_path}")
                              print(f"   Summary: {summary}")
                              
                              results.append({
                                  "file": file_path,
                                  "status": "success",
                                  "summary": summary
                              })
                          else:
                              print(f"ℹ️ No changes for {file_path}")
                              
                              results.append({
                                  "file": file_path,
                                  "status": "unchanged",
                                  "summary": "No changes required"
                              })
                      
                      except Exception as e:
                          print(f"❌ Error transforming {file_path}: {str(e)}")
                          
                          results.append({
                              "file": file_path,
                              "status": "error",
                              "error": str(e)
                          })
              
              # Write results to file
              with open('transformation_results.json', 'w') as f:
                  json.dump(results, f, indent=2)
          
          if __name__ == "__main__":
              main()
          EOF
          
          # Run the transformation script
          python transform.py
          
      - name: Create pull request with transformations
        if: github.event_name != 'pull_request' && success()
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "AI-powered code transformation: ${{ env.TRANSFORMATION_TYPE }}"
          title: "AI-powered code transformation: ${{ env.TRANSFORMATION_TYPE }}"
          body: |
            This PR contains AI-powered code transformations.
            
            - Transformation type: ${{ env.TRANSFORMATION_TYPE }}
            - Verification level: ${{ env.VERIFICATION_LEVEL }}
            - Safe mode: ${{ env.SAFE_MODE }}
            
            Please review the changes carefully before merging.
          branch: ai-transformation-${{ github.run_id }}
          delete-branch: true
